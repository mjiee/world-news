// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mjiee/world-news/backend/repository/model"
)

func newNewsDetail(db *gorm.DB, opts ...gen.DOOption) newsDetail {
	_newsDetail := newsDetail{}

	_newsDetail.newsDetailDo.UseDB(db, opts...)
	_newsDetail.newsDetailDo.UseModel(&model.NewsDetail{})

	tableName := _newsDetail.newsDetailDo.TableName()
	_newsDetail.ALL = field.NewAsterisk(tableName)
	_newsDetail.ID = field.NewUint(tableName, "id")
	_newsDetail.RecordId = field.NewUint(tableName, "record_id")
	_newsDetail.Source = field.NewString(tableName, "source")
	_newsDetail.Topic = field.NewString(tableName, "topic")
	_newsDetail.Title = field.NewString(tableName, "title")
	_newsDetail.Author = field.NewString(tableName, "author")
	_newsDetail.PublishedAt = field.NewTime(tableName, "published_at")
	_newsDetail.Link = field.NewString(tableName, "link")
	_newsDetail.Contents = field.NewString(tableName, "contents")
	_newsDetail.Images = field.NewString(tableName, "images")
	_newsDetail.CreatedAt = field.NewTime(tableName, "created_at")

	_newsDetail.fillFieldMap()

	return _newsDetail
}

type newsDetail struct {
	newsDetailDo newsDetailDo

	ALL         field.Asterisk
	ID          field.Uint
	RecordId    field.Uint
	Source      field.String
	Topic       field.String
	Title       field.String
	Author      field.String
	PublishedAt field.Time
	Link        field.String
	Contents    field.String
	Images      field.String
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (n newsDetail) Table(newTableName string) *newsDetail {
	n.newsDetailDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n newsDetail) As(alias string) *newsDetail {
	n.newsDetailDo.DO = *(n.newsDetailDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *newsDetail) updateTableName(table string) *newsDetail {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint(table, "id")
	n.RecordId = field.NewUint(table, "record_id")
	n.Source = field.NewString(table, "source")
	n.Topic = field.NewString(table, "topic")
	n.Title = field.NewString(table, "title")
	n.Author = field.NewString(table, "author")
	n.PublishedAt = field.NewTime(table, "published_at")
	n.Link = field.NewString(table, "link")
	n.Contents = field.NewString(table, "contents")
	n.Images = field.NewString(table, "images")
	n.CreatedAt = field.NewTime(table, "created_at")

	n.fillFieldMap()

	return n
}

func (n *newsDetail) WithContext(ctx context.Context) *newsDetailDo {
	return n.newsDetailDo.WithContext(ctx)
}

func (n newsDetail) TableName() string { return n.newsDetailDo.TableName() }

func (n newsDetail) Alias() string { return n.newsDetailDo.Alias() }

func (n newsDetail) Columns(cols ...field.Expr) gen.Columns { return n.newsDetailDo.Columns(cols...) }

func (n *newsDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *newsDetail) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 11)
	n.fieldMap["id"] = n.ID
	n.fieldMap["record_id"] = n.RecordId
	n.fieldMap["source"] = n.Source
	n.fieldMap["topic"] = n.Topic
	n.fieldMap["title"] = n.Title
	n.fieldMap["author"] = n.Author
	n.fieldMap["published_at"] = n.PublishedAt
	n.fieldMap["link"] = n.Link
	n.fieldMap["contents"] = n.Contents
	n.fieldMap["images"] = n.Images
	n.fieldMap["created_at"] = n.CreatedAt
}

func (n newsDetail) clone(db *gorm.DB) newsDetail {
	n.newsDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n newsDetail) replaceDB(db *gorm.DB) newsDetail {
	n.newsDetailDo.ReplaceDB(db)
	return n
}

type newsDetailDo struct{ gen.DO }

func (n newsDetailDo) Debug() *newsDetailDo {
	return n.withDO(n.DO.Debug())
}

func (n newsDetailDo) WithContext(ctx context.Context) *newsDetailDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n newsDetailDo) ReadDB() *newsDetailDo {
	return n.Clauses(dbresolver.Read)
}

func (n newsDetailDo) WriteDB() *newsDetailDo {
	return n.Clauses(dbresolver.Write)
}

func (n newsDetailDo) Session(config *gorm.Session) *newsDetailDo {
	return n.withDO(n.DO.Session(config))
}

func (n newsDetailDo) Clauses(conds ...clause.Expression) *newsDetailDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n newsDetailDo) Returning(value interface{}, columns ...string) *newsDetailDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n newsDetailDo) Not(conds ...gen.Condition) *newsDetailDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n newsDetailDo) Or(conds ...gen.Condition) *newsDetailDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n newsDetailDo) Select(conds ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n newsDetailDo) Where(conds ...gen.Condition) *newsDetailDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n newsDetailDo) Order(conds ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n newsDetailDo) Distinct(cols ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n newsDetailDo) Omit(cols ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n newsDetailDo) Join(table schema.Tabler, on ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n newsDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n newsDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n newsDetailDo) Group(cols ...field.Expr) *newsDetailDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n newsDetailDo) Having(conds ...gen.Condition) *newsDetailDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n newsDetailDo) Limit(limit int) *newsDetailDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n newsDetailDo) Offset(offset int) *newsDetailDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n newsDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *newsDetailDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n newsDetailDo) Unscoped() *newsDetailDo {
	return n.withDO(n.DO.Unscoped())
}

func (n newsDetailDo) Create(values ...*model.NewsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n newsDetailDo) CreateInBatches(values []*model.NewsDetail, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n newsDetailDo) Save(values ...*model.NewsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n newsDetailDo) First() (*model.NewsDetail, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsDetail), nil
	}
}

func (n newsDetailDo) Take() (*model.NewsDetail, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsDetail), nil
	}
}

func (n newsDetailDo) Last() (*model.NewsDetail, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsDetail), nil
	}
}

func (n newsDetailDo) Find() ([]*model.NewsDetail, error) {
	result, err := n.DO.Find()
	return result.([]*model.NewsDetail), err
}

func (n newsDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NewsDetail, err error) {
	buf := make([]*model.NewsDetail, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n newsDetailDo) FindInBatches(result *[]*model.NewsDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n newsDetailDo) Attrs(attrs ...field.AssignExpr) *newsDetailDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n newsDetailDo) Assign(attrs ...field.AssignExpr) *newsDetailDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n newsDetailDo) Joins(fields ...field.RelationField) *newsDetailDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n newsDetailDo) Preload(fields ...field.RelationField) *newsDetailDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n newsDetailDo) FirstOrInit() (*model.NewsDetail, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsDetail), nil
	}
}

func (n newsDetailDo) FirstOrCreate() (*model.NewsDetail, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NewsDetail), nil
	}
}

func (n newsDetailDo) FindByPage(offset int, limit int) (result []*model.NewsDetail, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n newsDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n newsDetailDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n newsDetailDo) Delete(models ...*model.NewsDetail) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *newsDetailDo) withDO(do gen.Dao) *newsDetailDo {
	n.DO = *do.(*gen.DO)
	return n
}
